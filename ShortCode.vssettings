<UserSettings><ApplicationIdentity version="17.0"/><ToolsOptions/><Category name="Environment_Group" RegisteredName="Environment_Group"><Category name="Environment_Toolbox" Category="{481999F2-7479-4e03-83D5-BE808BA142DF}" Package="{DA9FB551-C724-11d0-AE1F-00A0C90FFFC3}" RegisteredName="Environment_Toolbox" PackageName="Visual Studio Environment Package"><PropertyValue name="ShowAllTabs">false</PropertyValue><PropertyValue name="Version">1</PropertyValue><PropertyValue name="DeletedTabCount">0</PropertyValue><PropertyValue name="Tab0.Name">Algorithme</PropertyValue><PropertyValue name="Tab0.View">0</PropertyValue><PropertyValue name="Tab0.UseDefaultName">true</PropertyValue><PropertyValue name="Tab0.RecordType">1</PropertyValue><PropertyValue name="Tab0.Position">28</PropertyValue><PropertyValue name="Tab1.ID">{e7f851c8-6267-4794-b0fe-7bcab6dacbb4}-#1071</PropertyValue><PropertyValue name="Tab1.Name">Standard</PropertyValue><PropertyValue name="Tab1.View">0</PropertyValue><PropertyValue name="Tab1.UseDefaultName">true</PropertyValue><PropertyValue name="Tab1.RecordType">4</PropertyValue><PropertyValue name="Tab1.Position">37</PropertyValue><PropertyValue name="TabCount">2</PropertyValue><PropertyValue name="DeletedItemCount">0</PropertyValue><PropertyValue name="Item0.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item0.ID">68CF179F4DEA724FFFF99367AE4C3808</PropertyValue><PropertyValue name="Item0.Name">AES</PropertyValue><PropertyValue name="Item0.UseDefaultName">false</PropertyValue><PropertyValue name="Item0.Tab">Algorithme</PropertyValue><PropertyValue name="Item0.OriginalTab">Algorithme</PropertyValue><PropertyValue name="Item0.RecordType">1</PropertyValue><PropertyValue name="Item0.Data">public static (string Tostring, byte[] Bytes) AES(object Data, bool encrypt, byte[] SetKey = null, byte[] SetIv = null) {
            try
            {
				if (Data is byte[] == false &amp;&amp; (((string)Data).Length % 4 == 0) &amp;&amp; Regex.IsMatch((string)Data, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None))
					Data = Convert.FromBase64String((string)Data);
				AesManaged aes = new AesManaged();
				aes.Key = (SetKey != null) ? SetKey : aes.Key;
				aes.IV = (SetIv != null) ? SetIv : aes.IV;
				if (encrypt)
				{
					using (MemoryStream ms = new MemoryStream())
					{
						using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(aes.Key, aes.IV), CryptoStreamMode.Write))
						using (StreamWriter sw = new StreamWriter(cs))
							sw.Write((string)Data);
						return (Convert.ToBase64String(ms.ToArray()), ms.ToArray());
					}
				}
				else
				{
					using (MemoryStream ms = new MemoryStream((byte[])Data))
					using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(aes.Key, aes.IV), CryptoStreamMode.Read))
					using (StreamReader reader = new StreamReader(cs))
						Data = reader.ReadToEnd();
					return ((string)Data, UTF8Encoding.UTF8.GetBytes((string)Data));
				}
			}
            catch (Exception ex) {

                throw ex;
            }
		}</PropertyValue><PropertyValue name="Item0.Position">1</PropertyValue><PropertyValue name="Item1.DataProvider">{0A057BAD-6706-45D2-A800-683A29EC6BA3}</PropertyValue><PropertyValue name="Item1.ID">3546BFA00430AB8B284C4E3DD11CCC41</PropertyValue><PropertyValue name="Item1.Name">Triple DES</PropertyValue><PropertyValue name="Item1.UseDefaultName">true</PropertyValue><PropertyValue name="Item1.Tab">Algorithme</PropertyValue><PropertyValue name="Item1.OriginalTab">Algorithme</PropertyValue><PropertyValue name="Item1.RecordType">1</PropertyValue><PropertyValue name="Item1.Data">public static (string Tostring, byte[] Bytes) TDES(object Data, object Key, CipherMode Cipher, PaddingMode Padding, bool Encrypt)
		{
		
			try {
				if (Data is byte[] == false &amp;&amp; (((string)Data).Length % 4 == 0) &amp;&amp; Regex.IsMatch((string)Data, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None))
					Data = Convert.FromBase64String((string)Data); 
				else if (Data is byte[] == false)
					Data = UTF8Encoding.UTF8.GetBytes((string)Data);

				if (Key is byte[] == true &amp;&amp; ((byte[])Key).Length != 16)
					Key = new MD5CryptoServiceProvider().ComputeHash((byte[])Key);
				else if (Key is string)
					Key = new MD5CryptoServiceProvider().ComputeHash(UTF8Encoding.UTF8.GetBytes((string)Key));

				TripleDESCryptoServiceProvider ServiceProvider = new TripleDESCryptoServiceProvider()
				{
					Key = (byte[])Key,
					Mode = Cipher,
					Padding = Padding
				};
				if (Encrypt)
				{
					byte[] FinalBlock = ServiceProvider.CreateEncryptor().TransformFinalBlock((byte[])Data, 0, ((byte[])Data).Length);
					return (Convert.ToBase64String(FinalBlock), FinalBlock);
				}
				else
				{
					byte[] FinalBlock = ServiceProvider.CreateDecryptor().TransformFinalBlock((byte[])Data, 0, ((byte[])Data).Length);
					return (UTF8Encoding.UTF8.GetString(FinalBlock), FinalBlock);
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
		}</PropertyValue><PropertyValue name="Item1.Position">2</PropertyValue><PropertyValue name="ItemCount">2</PropertyValue></Category></Category></UserSettings>
